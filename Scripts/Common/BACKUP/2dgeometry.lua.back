--[[
	2D Geometry 1.0 by Husky
	========================================================================

	Enables you to perform geometric calculations. Since it is focused on a
	2-dimensional euclidean space it is often faster and easier to use than an
	implementation for a 3-dimensional space. It can be used to evaluate the
	position of geometric objects to each other.

	The following classes and methods exist:

	-- Classes ----------------------------------------------------------------

	Point(x, y)
	Line(point1, point2)
	Circle(point1, point2, radius)
	LineSegment(point1, point2)
	Triangle(point1, point2, point3)
	Quadrilateral(point1, point2, point3, point4)

	-- Common Operations ------------------------------------------------------

	object1:getPoints()
	object1:getLineSegments()
	object1:distance(object2)
	object1:contains(object2)
	object1:insideOf(object2)
	object1:intersectionPoints(object2)

	-- Point specific operations ----------------------------------------------

	a point is a vector in the 2d euclidean space and can be used for the usual
	vector calculations like:

	point3 = point1 + point2

	additionally the following methods are supported:

	point:perpendicularFoot(line)
	point:polar()
	point:normalize()
	point:normalized()
	point:clone()

	-- Quadrilateral specific operations --------------------------------------

	quadriliteral:triangulate()

	Changelog
	~~~~~~~~~

	1.0	- initial release with the most important shapes and operations
]]

-- Code ------------------------------------------------------------------------

class 'Point' -- {
	function Point:__init(x, y)
		self.x = x
		self.y = y

		self.points = {self}
	end

	function Point:__type()
		return "Point"
	end

	function Point:__eq(spatialObject)
		return spatialObject:__type() == "Point" and self.x == spatialObject.x and self.y == spatialObject.y
	end

	function Point:__unm()
		return Point(-self.x, -self.y)
	end

	function Point:__add(p)
		return Point(self.x + p.x, self.y + p.y)
	end

	function Point:__sub(p)
		return Point(self.x - p.x, self.y - p.y)
	end

	function Point:__mul(p)
		if type(p) == "number" then
			return Point(self.x * p, self.y * p)
		else
			return Point(self.x * p.x, self.y * p.y)
		end
	end

	function Point:__div(p)
		if type(p) == "number" then
			return Point(self.x / p, self.y / p)
		else
			return Point(self.x / p.x, self.y / p.y)
		end
	end

	function Point:len()
		return math.sqrt(self.x * self.x + self.y * self.y)
	end

	function Point:normalize()
		len = self:len()

		self.x = self.x / len
		self.y = self.y / len

		return self
	end

	function Point:clone()
		return Point(self.x, self.y)
	end

	function Point:normalized()
		local a = self:clone()
		a:normalize()
		return a
	end

	function Point:getPoints()
		return self.points
	end

	function Point:getLineSegments()
		return {}
	end

	function Point:contains(spatialObject)
		if spatialObject:__type() == "Line" then
			return false
		elseif spatialObject:__type() == "Circle" then
			return spatialObject.point == self and spatialObject.radius == 0
		else
		for i, point in ipairs(spatialObject:getPoints()) do
			if point ~= self then
				return false
			end
		end
	end

		return true
	end

	function Point:polar()
		if math.close(self.x, 0) then
			if self.y > 0 then return 90
			elseif self.y < 0 then return 270
			else return 0
			end
		else
			local theta = math.deg(math.atan(self.y / self.x))
			if self.x < 0 then theta = theta + 180 end
			if theta < 0 then theta = theta + 360 end
			return theta
		end
	end

	function Point:insideOf(spatialObject)
		return spatialObject.contains(self)
	end

	function Point:distance(spatialObject)
		if spatialObject:__type() == "Point" then
			return math.sqrt((self.x - spatialObject.x)^2 + (self.y - spatialObject.y)^2)
		elseif spatialObject:__type() == "Line" then
			m = (spatialObject.point2.y - spatialObject.point1.y) / (spatialObject.point2.x - spatialObject.point1.x)

			return math.abs((m * self.x - self.y + (spatialObject.point1.y - m * spatialObject.point1.x)) / math.sqrt(m * m + 1))
		elseif spatialObject:__type() == "Circle" then
			return self:distance(spatialObject.point) - spatialObject.radius
		elseif spatialObject:__type() == "LineSegment" then
			local t = ((self.x - spatialObject.point1.x) * (spatialObject.point2.x - spatialObject.point1.x) + (self.y - spatialObject.point1.y) * (spatialObject.point2.y - spatialObject.point1.y)) / ((spatialObject.point2.x - spatialObject.point1.x)^2 + (spatialObject.point2.y - spatialObject.point1.y)^2)

			if t <= 0.0 then
				return self:distance(spatialObject.point1)
			elseif t >= 1.0 then
				return self:distance(spatialObject.point2)
			else
				return self:distance(Line(spatialObject.point1, spatialObject.point2))
			end
		else
			local minDistance = nil

			for i, lineSegment in ipairs(spatialObject:getLineSegments()) do
				if minDistance == nil then
					minDistance = self:distance(lineSegment)
				else
					minDistance = math.min(minDistance, self:distance(lineSegment))
				end
			end

			return minDistance
		end
	end
-- }

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--

class 'Line' -- {
	function Line:__init(point1, point2)
		self.point1 = point1
		self.point2 = point2

		self.points = {self.point1, self.point2}
	end

	function Line:__type()
		return "Line"
	end

	function Line:__eq(spatialObject)
		return spatialObject:__type() == "Line" and self:distance(spatialObject) == 0
	end

	function Line:getPoints()
		return self.points
	end

	function Line:getLineSegments()
		return {}
	end

	function Line:contains(spatialObject)
		if spatialObject:__type() == "Point" then
			return spatialObject:distance(self) == 0
		elseif spatialObject:__type() == "Line" then
			return self.point1:distance(spatialObject) == 0 and self.point2:distance(spatialObject) == 0
		elseif spatialObject:__type() == "Circle" then
			return spatialObject.point:distance(self) == 0 and spatialObject.radius == 0
		elseif spatialObject:__type() == "LineSegment" then
			return spatialObject.point1:distance(self) == 0 and spatialObject.point2:distance(self) == 0
		else
		for i, point in ipairs(spatialObject:getPoints()) do
			if point:distance(self) ~= 0 then
				return false
			end
			end

			return true
		end

		return false
	end

	function Line:insideOf(spatialObject)
		return spatialObject:contains(self)
	end

	function Line:distance(spatialObject)
		if spatialObject:__type() == "Circle" then
			return spatialObject.point:distance(self) - spatialObject.radius
		elseif spatialObject:__type() == "Line" then
			distance1 = self.point1:distance(spatialObject)
			distance2 = self.point2:distance(spatialObject)
			if distance1 ~= distance2 then
				return 0
			else
				return distance1
			end
		else
			minDistance = nil
			for i, point in ipairs(spatialObject:getPoints()) do
				distance = point:distance(self)
				if minDistance == nil or distance <= minDistance then
					minDistance = distance
				end
			end

			return minDistance
		end
	end
-- }

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--

class 'Circle' -- {
	function Circle:__init(point, radius)
		self.point = point
		self.radius = radius

		self.points = {self.point}
	end

	function Circle:__type()
		return "Circle"
	end

	function Circle:__eq(spatialObject)
		return spatialObject:__type() == "Circle" and (self.point == spatialObject.point and self.radius == spatialObject.radius)
	end

	function Circle:getPoints()
		return self.points
	end

	function Circle:getLineSegments()
		return {}
	end

	function Circle:contains(spatialObject)
		if spatialObject:__type() == "Line" then
			return false
		elseif spatialObject:__type() == "Circle" then
			return self.radius >= spatialObject.radius + self.point:distance(spatialObject.point)
		else
			for i, point in ipairs(spatialObject:getPoints()) do
				if self.point:distance(point) >= self.radius then
					return false
				end
			end

			return true
		end
	end

	function Circle:insideOf(spatialObject)
		return spatialObject:contains(self)
	end

	function Circle:distance(spatialObject)
		return self.point:distance(spatialObject) - self.radius
	end

	function Circle:intersectionPoints(spatialObject)
		result = {}

		dx = self.point.x - spatialObject.point.x
		dy = self.point.y - spatialObject.point.y
		dist = math.sqrt(dx * dx + dy * dy)

		if dist > self.radius + spatialObject.radius then
			return result
		elseif dist < math.abs(self.radius - spatialObject.radius) then
			return result
		elseif (dist == 0) and (self.radius == spatialObject.radius) then
			return result
		else
			a = (self.radius * self.radius - spatialObject.radius * spatialObject.radius + dist * dist) / (2 * dist)
			h = math.sqrt(self.radius * self.radius - a * a)

			cx2 = self.point.x + a * (spatialObject.point.x - self.point.x) / dist
			cy2 = self.point.y + a * (spatialObject.point.y - self.point.y) / dist

			intersectionx1 = cx2 + h * (spatialObject.point.y - self.point.y) / dist
			intersectiony1 = cy2 - h * (spatialObject.point.x - self.point.x) / dist
			intersectionx2 = cx2 - h * (spatialObject.point.y - self.point.y) / dist
			intersectiony2 = cy2 + h * (spatialObject.point.x - self.point.x) / dist

			table.insert(result, Point(intersectionx1, intersectiony1))

			if intersectionx1 ~= intersectionx2 or intersectiony1 ~= intersectiony2 then
				table.insert(result, Point(intersectionx2, intersectiony2))
			end
		end

		return result
	end
-- }

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--

class 'LineSegment' -- {
	function LineSegment:__init(point1, point2)
		self.point1 = point1
		self.point2 = point2

		self.points = {self.point1, self.point2}
	end

	function LineSegment:__type()
		return "Line"
	end

	function LineSegment:__eq(spatialObject)
		return spatialObject:__type() == "LineSegment" and ((self.point1 == spatialObject.point1 and self.point2 == spatialObject.point2) or (self.point2 == spatialObject.point1 and self.point1 == spatialObject.point2))
	end

	function LineSegment:getPoints()
		return self.points
	end

	function LineSegment:getLineSegments()
		return {self}
	end

	function LineSegment:contains(spatialObject)
		if spatialObject:__type() == "Point" then
			return spatialObject:distance(self) == 0
		elseif spatialObject:__type() == "Line" then
			return false
		elseif spatialObject:__type() == "Circle" then
			return spatialObject.point:distance(self) == 0 and spatialObject.radius == 0
		elseif spatialObject:__type() == "LineSegment" then
			return spatialObject.point1:distance(self) == 0 and spatialObject.point2:distance(self) == 0
		else
		for i, point in ipairs(spatialObject:getPoints()) do
			if point:distance(self) ~= 0 then
				return false
			end
			end

			return true
		end

		return false
	end

	function LineSegment:insideOf(spatialObject)
		return spatialObject:contains(self)
	end

	function LineSegment:distance(spatialObject)
		if spatialObject:__type() == "Circle" then
			return spatialObject.point:distance(self) - spatialObject.radius
		elseif spatialObject:__type() == "Line" then
			return math.min(self.point1:distance(spatialObject), self.point2:distance(spatialObject))
		else
			minDistance = nil
			for i, point in ipairs(spatialObject:getPoints()) do
				distance = point:distance(self)
				if minDistance == nil or distance <= minDistance then
					minDistance = distance
				end
			end

			return minDistance
		end
	end
-- }

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--

class 'Triangle' -- {
	function Triangle:__init(point1, point2, point3)
		self.point1 = point1
		self.point2 = point2
		self.point3 = point3

		self.points = {self.point1, self.point2, self.point3}
		self.lineSegments = {LineSegment(self.point1, self.point2), LineSegment(self.point2, self.point3), LineSegment(self.point3, self.point1)}
	end

	function Triangle:__type()
		return "Triangle"
	end

	function Triangle:__eq(spatialObject)
		return spatialObject:__type() == "Triangle" and ((self.point1 == spatialObject.point1 and self.point2 == spatialObject.point2 and self.point3 == spatialObject.point3) or (self.point1 == spatialObject.point2 and self.point2 == spatialObject.point3 and self.point3 == spatialObject.point1) or (self.point1 == spatialObject.point3 and self.point2 == spatialObject.point1 and self.point3 == spatialObject.point2))
	end

	function Triangle:getPoints()
		return self.points
	end

	function Triangle:getLineSegments()
		return self.lineSegments
	end

	function Triangle:contains(spatialObject)
		if spatialObject:__type() == "Line" then
			return false
		else
		for i, point in ipairs(spatialObject:getPoints()) do
			corner1DotCorner2 = ((point.y - self.point1.y) * (self.point2.x - self.point1.x)) - ((point.x - self.point1.x) * (self.point2.y - self.point1.y))
			corner2DotCorner3 = ((point.y - self.point2.y) * (self.point3.x - self.point2.x)) - ((point.x - self.point2.x) * (self.point3.y - self.point2.y))
			corner3DotCorner1 = ((point.y - self.point3.y) * (self.point1.x - self.point3.x)) - ((point.x - self.point3.x) * (self.point1.y - self.point3.y))

			if not (corner1DotCorner2 * corner2DotCorner3 >= 0 and corner2DotCorner3 * corner3DotCorner1 >= 0) then
				return false
			end
		end

			if spatialObject:__type() == "Circle" then
				for i, lineSegment in ipairs(self:getLineSegments()) do
					if spatialObject.point:distance(lineSegment) <= 0 then
						return false
					end
				end
			end

		return true
		end
	end

	function Triangle:insideOf(spatialObject)
		return spatialObject:contains(self)
	end

	function Triangle:distance(spatialObject)
		minDistance = nil
		for i, lineSegment in ipairs(self:getLineSegment()) do
			distance = point:distance(self)
			if minDistance == nil or distance <= minDistance then
				minDistance = distance
			end
		end

		return minDistance
	end

	function Triangle:triangulate()
		return {self}
	end
-- }

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~--

class 'Quadrilateral' -- {
	function Quadrilateral:__init(point1, point2, point3, point4)
		self.point1 = point1
		self.point2 = point2
		self.point3 = point3
		self.point4 = point4

		self.points = {self.point1, self.point2, self.point3, self.point4}
		self.lineSegments = {LineSegment(self.point1, self.point2), LineSegment(self.point2, self.point3), LineSegment(self.point3, self.point4), LineSegment(self.point4, self.point1)}
	end

	function Quadrilateral:__type()
		return "Quadrilateral"
	end

	function Quadrilateral:__eq(spatialObject)
		return spatialObject:__type() == "Quadrilateral" and ((self.point1 == spatialObject.point1 and self.point2 == spatialObject.point2 and self.point3 == spatialObject.point3 and self.point4 == spatialObject.point4) or (self.point1 == spatialObject.point2 and self.point2 == spatialObject.point3 and self.point3 == spatialObject.point4 and self.point4 == spatialObject.point1) or (self.point1 == spatialObject.point3 and self.point2 == spatialObject.point4 and self.point3 == spatialObject.point1 and self.point4 == spatialObject.point2) or (self.point1 == spatialObject.point4 and self.point2 == spatialObject.point1 and self.point3 == spatialObject.point2 and self.point4 == spatialObject.point3))
	end

	function Quadrilateral:getPoints()
		return self.points
	end

	function Quadrilateral:getLineSegments()
		return self.lineSegments
	end

	function Quadrilateral:contains(spatialObject)
		for i, point in ipairs(spatialObject:getPoints()) do
			inTriangles = false
			for j, triangle in ipairs(self:triangulate()) do
				if triangle:contains(point) then
					inTriangles = true
					break
				end
			end
			if not inTriangles then
				return false
			end
		end

		return true
	end

	function Quadrilateral:insideOf(spatialObject)
		return spatialObject.contains(self)
	end

	function Quadrilateral:triangulate()
		if self.triangles == nil then
			self.triangles = {Triangle(self.point1, self.point2, self.point3), Triangle(self.point1, self.point3, self.point4)}
		end

		return self.triangles
	end
-- }